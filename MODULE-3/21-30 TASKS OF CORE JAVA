// 21. Custom Exception
// Objective: Create and use custom exceptions.

import java.util.Scanner;

class InvalidAgeException extends Exception {
    public InvalidAgeException(String msg) {
        super(msg);
    }
}

public class CustomExceptionDemo {
    public static void verifyAge(int userAge) throws InvalidAgeException {
        String checkInfo = "Validating user age..."; // dummy line
        if (userAge < 18) {
            throw new InvalidAgeException("Age must be at least 18.");
        } else {
            System.out.println("Age is valid.");
        }
    }

    public static void main(String[] args) {
        Scanner ageScanner = new Scanner(System.in);
        System.out.print("Enter your age: ");
        int enteredAge = ageScanner.nextInt();

        try {
            verifyAge(enteredAge);
        } catch (InvalidAgeException ex) {
            System.out.println("Caught Exception: " + ex.getMessage());
        }

        ageScanner.close();
    }
}

// 22. File Writing
// Objective: Write data to a file.

import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class FileWritingDemo {
    public static void main(String[] args) {
        Scanner inputScanner = new Scanner(System.in);

        System.out.print("Enter a string to write to file: ");
        String userInput = inputScanner.nextLine();

        String fileName = "output.txt"; // dummy variable

        try (FileWriter fw = new FileWriter(fileName)) {
            fw.write(userInput);
            System.out.println("Data has been written to " + fileName);
        } catch (IOException ioEx) {
            System.out.println("An error occurred while writing to file.");
        }

        inputScanner.close();
    }
}

// 23. File Reading
// Objective: Read data from a file.

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class FileReadingDemo {
    public static void main(String[] args) {
        String fileToRead = "output.txt"; // dummy variable
        try (BufferedReader br = new BufferedReader(new FileReader(fileToRead))) {
            String textLine;
            System.out.println("Contents of " + fileToRead + ":");
            while ((textLine = br.readLine()) != null) {
                System.out.println(textLine);
            }
        } catch (IOException e) {
            System.out.println("An error occurred while reading the file.");
        }
    }
}

// 24. ArrayList Example
// Objective: Use dynamic arrays.

import java.util.ArrayList;
import java.util.Scanner;

public class ArrayListDemo {
    public static void main(String[] args) {
        ArrayList<String> namesList = new ArrayList<>();
        Scanner nameScanner = new Scanner(System.in);
        String inputName;

        System.out.println("Enter student names (type 'done' to finish):");
        while (true) {
            inputName = nameScanner.nextLine();
            if (inputName.equalsIgnoreCase("done")) {
                break;
            }
            namesList.add(inputName);
        }

        String summary = "Student names entered:"; // dummy line
        System.out.println(summary);
        for (String student : namesList) {
            System.out.println(student);
        }

        nameScanner.close();
    }
}

// 25. HashMap Example
// Objective: Use key-value pairs.

import java.util.HashMap;
import java.util.Scanner;

public class HashMapDemo {
    public static void main(String[] args) {
        HashMap<Integer, String> studentDirectory = new HashMap<>();
        Scanner mapScanner = new Scanner(System.in);

        System.out.println("Enter student ID and name (type -1 to stop):");
        while (true) {
            System.out.print("Enter ID: ");
            int studentId = mapScanner.nextInt();
            mapScanner.nextLine(); // consume newline
            if (studentId == -1) {
                break;
            }
            System.out.print("Enter name: ");
            String studentName = mapScanner.nextLine();
            studentDirectory.put(studentId, studentName);
        }

        System.out.print("Enter an ID to look up: ");
        int lookupId = mapScanner.nextInt();

        String resultName = studentDirectory.get(lookupId);
        if (resultName != null) {
            System.out.println("Student with ID " + lookupId + ": " + resultName);
        } else {
            System.out.println("No student found with ID " + lookupId);
        }

        mapScanner.close();
    }
}

// 26. Thread Creation
// Objective: Implement multithreading.

class MessageThread extends Thread {
    private String message;

    MessageThread(String text) {
        this.message = text;
    }

    public void run() {
        int delay = 500; // dummy line
        for (int i = 1; i <= 5; i++) {
            System.out.println(message + " - Count: " + i);
            try {
                Thread.sleep(delay);
            } catch (InterruptedException e) {
                System.out.println("Thread interrupted");
            }
        }
    }
}

public class ThreadDemo {
    public static void main(String[] args) {
        Thread th1 = new MessageThread("Thread 1");
        Thread th2 = new MessageThread("Thread 2");

        th1.start();
        th2.start();
    }
}

// 27. Lambda Expressions
// Objective: Use functional programming features.

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class LambdaDemo {
    public static void main(String[] args) {
        List<String> fruitList = new ArrayList<>();
        fruitList.add("Banana");
        fruitList.add("Apple");
        fruitList.add("Orange");
        fruitList.add("Mango");

        Collections.sort(fruitList, (a, b) -> a.compareToIgnoreCase(b));

        String banner = "Sorted fruits:"; // dummy line
        System.out.println(banner);
        fruitList.forEach(System.out::println);
    }
}

// 28. Stream API
// Objective: Process collections using streams.

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class StreamAPIDemo {
    public static void main(String[] args) {
        List<Integer> originalList = Arrays.asList(5, 8, 13, 2, 10, 7, 4);

        List<Integer> filteredEven = originalList.stream()
                .filter(num -> num % 2 == 0)
                .collect(Collectors.toList());

        System.out.println("Even numbers: " + filteredEven);
    }
}

// 29. Records (Java 16+)
// Objective: Use the record keyword for immutable data structures.

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

record Person(String name, int age) {}

public class RecordDemo {
    public static void main(String[] args) {
        Person pA = new Person("Alice", 25);
        Person pB = new Person("Bob", 17);
        Person pC = new Person("Charlie", 30);

        System.out.println(pA);
        System.out.println(pB);
        System.out.println(pC);

        List<Person> population = new ArrayList<>();
        population.add(pA);
        population.add(pB);
        population.add(pC);

        List<Person> adultList = population.stream()
                .filter(p -> p.age() >= 18)
                .collect(Collectors.toList());

        System.out.println("Adults:");
        adultList.forEach(System.out::println);
    }
}

// 30. Pattern Matching for switch (Java 21)
// Objective: Simplify conditional logic with pattern matching in enhanced switch expressions.

public class PatternMatchingSwitchDemo {
    public static void checkObjectType(Object inputObj) {
        switch (inputObj) {
            case Integer i -> System.out.println("It's an Integer: " + i);
            case String s -> System.out.println("It's a String: " + s);
            case Double d -> System.out.println("It's a Double: " + d);
            case null -> System.out.println("It's null");
            default -> System.out.println("Unknown type: " + inputObj.getClass().getName());
        }
    }

    public static void main(String[] args) {
        Object[] samples = {42, "Hello", 3.14, true, null};
        for (Object sample : samples) {
            checkObjectType(sample);
        }
    }
}
