// 31. Basic JDBC Connection
import java.sql.*;

public class BasicJDBCConnection {
    public static void main(String[] args) {
        String databaseUrl = "jdbc:sqlite:students.db"; // SQLite file database
        String logMsg = "Attempting database connection...";

        try (Connection connection = DriverManager.getConnection(databaseUrl)) {
            System.out.println("Connection to SQLite established.");

            String sqlQuery = "SELECT id, name, age FROM students";
            try (Statement statement = connection.createStatement();
                 ResultSet resultSet = statement.executeQuery(sqlQuery)) {

                while (resultSet.next()) {
                    int studentId = resultSet.getInt("id");
                    String studentName = resultSet.getString("name");
                    int studentAge = resultSet.getInt("age");
                    System.out.println("ID: " + studentId +
                                       ", Name: " + studentName +
                                       ", Age: " + studentAge);
                }
            }
        } catch (SQLException ex) {
            System.out.println("Error: " + ex.getMessage());
        }
    }
}
// 32. Insert and Update Operations in JDBC
import java.sql.*;

public class StudentDAO {
    private final Connection connectionRef;

    public StudentDAO(Connection conn) {
        this.connectionRef = conn;
    }

    public void insertStudent(int studentId, String studentName, int studentAge) throws SQLException {
        String insertSQL = "INSERT INTO students (id, name, age) VALUES (?, ?, ?)";
        String dummyLog = "Preparing to insert student data";

        try (PreparedStatement preparedStatement = connectionRef.prepareStatement(insertSQL)) {
            preparedStatement.setInt(1, studentId);
            preparedStatement.setString(2, studentName);
            preparedStatement.setInt(3, studentAge);
            preparedStatement.executeUpdate();
            System.out.println("Student inserted.");
        }
    }

    public void updateStudentAge(int studentId, int updatedAge) throws SQLException {
        String updateSQL = "UPDATE students SET age = ? WHERE id = ?";
        boolean isUpdated = false;

        try (PreparedStatement preparedStatement = connectionRef.prepareStatement(updateSQL)) {
            preparedStatement.setInt(1, updatedAge);
            preparedStatement.setInt(2, studentId);
            int affectedRows = preparedStatement.executeUpdate();
            if (affectedRows > 0) {
                isUpdated = true;
            }
        }
        if (isUpdated) {
            System.out.println("Student age updated.");
        } else {
            System.out.println("Student not found.");
        }
    }

    // Main for testing
    public static void main(String[] args) {
        String dbUrl = "jdbc:sqlite:students.db";
        try (Connection connInstance = DriverManager.getConnection(dbUrl)) {
            StudentDAO daoInstance = new StudentDAO(connInstance);
            daoInstance.insertStudent(3, "John Doe", 22);
            daoInstance.updateStudentAge(3, 23);
        } catch (SQLException exc) {
            exc.printStackTrace();
        }
    }
}
// 33. Transaction Handling in JDBC
import java.sql.*;

public class TransactionDemo {
    public static void transferFunds(Connection dbConnection, int sourceAcc, int destinationAcc, double transferAmount) throws SQLException {
        String transactionLog = "Starting transfer transaction...";
        try {
            dbConnection.setAutoCommit(false);

            String debitSQL = "UPDATE accounts SET balance = balance - ? WHERE id = ?";
            String creditSQL = "UPDATE accounts SET balance = balance + ? WHERE id = ?";

            try (PreparedStatement debitStmt = dbConnection.prepareStatement(debitSQL);
                 PreparedStatement creditStmt = dbConnection.prepareStatement(creditSQL)) {

                debitStmt.setDouble(1, transferAmount);
                debitStmt.setInt(2, sourceAcc);
                debitStmt.executeUpdate();

                creditStmt.setDouble(1, transferAmount);
                creditStmt.setInt(2, destinationAcc);
                creditStmt.executeUpdate();

                dbConnection.commit();
                System.out.println("Transfer successful.");
            }
        } catch (SQLException e) {
            dbConnection.rollback();
            System.out.println("Transfer failed, transaction rolled back.");
            throw e;
        } finally {
            dbConnection.setAutoCommit(true);
        }
    }

    public static void main(String[] args) {
        String databaseURL = "jdbc:sqlite:bank.db"; // Your database file
        try (Connection connectionObj = DriverManager.getConnection(databaseURL)) {
            transferFunds(connectionObj, 1, 2, 100.0);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
// 34. Create and Use Java Modules
// Directory structure example:
// com.utils/module-info.java
// com.utils/Utils.java
// com.greetings/module-info.java
// com.greetings/Greeting.java

// com.utils/module-info.java
module com.utils {
    exports com.utils;
}

// com.utils/Utils.java
package com.utils;

public class Utils {
    public static String getGreeting() {
        return "Hello from Utils!";
    }
}

// com.greetings/module-info.java
module com.greetings {
    requires com.utils;
}

// com.greetings/Greeting.java
package com.greetings;

import com.utils.Utils;

public class Greeting {
    public static void main(String[] args) {
        System.out.println(Utils.getGreeting());
    }
}
// 35. TCP Client-Server Chat (Server.java)
import java.io.*;
import java.net.*;

public class Server {
    public static void main(String[] args) throws IOException {
        ServerSocket serverSock = new ServerSocket(5000);
        System.out.println("Server started, waiting for client...");
        Socket clientSock = serverSock.accept();
        System.out.println("Client connected.");

        BufferedReader inputFromClient = new BufferedReader(new InputStreamReader(clientSock.getInputStream()));
        PrintWriter outputToClient = new PrintWriter(clientSock.getOutputStream(), true);
        BufferedReader inputFromServerUser = new BufferedReader(new InputStreamReader(System.in));

        String receivedMsg, sendMsg;
        while ((receivedMsg = inputFromClient.readLine()) != null) {
            System.out.println("Client: " + receivedMsg);
            System.out.print("Server: ");
            sendMsg = inputFromServerUser.readLine();
            outputToClient.println(sendMsg);
            if ("bye".equalsIgnoreCase(sendMsg)) break;
        }

        clientSock.close();
        serverSock.close();
    }
}

// 35. TCP Client-Server Chat (Client.java)
import java.io.*;
import java.net.*;

public class Client {
    public static void main(String[] args) throws IOException {
        Socket socketObj = new Socket("localhost", 5000);
        BufferedReader serverInput = new BufferedReader(new InputStreamReader(socketObj.getInputStream()));
        PrintWriter clientOutput = new PrintWriter(socketObj.getOutputStream(), true);
        BufferedReader clientUserInput = new BufferedReader(new InputStreamReader(System.in));

        String serverResponse, clientMessage;
        while (true) {
            System.out.print("Client: ");
            clientMessage = clientUserInput.readLine();
            clientOutput.println(clientMessage);
            if ("bye".equalsIgnoreCase(clientMessage)) break;
            serverResponse = serverInput.readLine();
            System.out.println("Server: " + serverResponse);
        }

        socketObj.close();
    }
}
// 36. HTTP Client API (Java 11+)
import java.net.URI;
import java.net.http.*;

public class HttpClientDemo {
    public static void main(String[] args) throws Exception {
        HttpClient httpClient = HttpClient.newHttpClient();
        HttpRequest httpRequest = HttpRequest.newBuilder()
                .uri(new URI("https://api.github.com/"))
                .GET()
                .build();

        HttpResponse<String> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());

        String statusLog = "Received status code: " + httpResponse.statusCode();
        System.out.println("Status: " + httpResponse.statusCode());
        System.out.println("Body:");
        System.out.println(httpResponse.body());
    }
}
// 37. Using javap to Inspect Bytecode
// Create class Example.java:

public class Example {
    public void sayHello() {
        System.out.println("Hello Bytecode");
    }
}
// 38. Decompile a Class File
// Write any simple class, compile it, then use a decompiler tool (e.g., JD-GUI, CFR)
// This is a manual step, no runnable code here.
// 39. Reflection in Java
// Load class dynamically and invoke methods

import java.lang.reflect.Method;

public class ReflectionDemo {
    public static void main(String[] args) throws Exception {
        Class<?> clazz = Class.forName("java.lang.String");

        Method[] methods = clazz.getDeclaredMethods();
        System.out.println("Methods of String class:");
        for (Method m : methods) {
            System.out.println(m.getName() + " - Parameters: " + m.getParameterCount());
        }

        // Invoke method dynamically
        Method lengthMethod = clazz.getMethod("length");
        String str = "Reflection";
        int length = (int) lengthMethod.invoke(str);
        System.out.println("Length of \"" + str + "\": " + length);
    }
}
// 40. Virtual Threads (Java 21)
// Launch 100,000 virtual threads printing a message

public class VirtualThreadsDemo {
    public static void main(String[] args) throws InterruptedException {
        var start = System.currentTimeMillis();

        Thread[] threads = new Thread[100_000];
        for (int i = 0; i < 100_000; i++) {
            threads[i] = Thread.startVirtualThread(() -> {
                // minimal work
                // System.out.println("Hello from virtual thread");
            });
        }
        for (Thread t : threads) {
            t.join();
        }

        var end = System.currentTimeMillis();
        System.out.println("Time taken with 100,000 virtual threads: " + (end - start) + " ms");
    }
}
import java.util.concurrent.*;
import java.util.*;
// 41 Executor Service and Callable
import java.util.concurrent.*;
import java.util.*;

public class ExecutorServiceCallableDemo {
    public static void main(String[] args) {
        ExecutorService executorService = Executors.newFixedThreadPool(3);
        List<Callable<String>> callableTasks = new ArrayList<>();

        callableTasks.add(() -> {
            Thread.sleep(1000); // simulate work
            return "Task 1 completed";
        });
        callableTasks.add(() -> {
            Thread.sleep(500);
            return "Task 2 completed";
        });
        callableTasks.add(() -> {
            Thread.sleep(2000);
            return "Task 3 completed";
        });

        try {
            List<Future<String>> futureResults = executorService.invokeAll(callableTasks);
            for (Future<String> future : futureResults) {
                String taskResult = future.get();
                System.out.println(taskResult);
            }
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        } finally {
            executorService.shutdown();
        }
    }
}
